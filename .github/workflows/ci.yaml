name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: python -m pip install --upgrade pip
      - run: pip install flake8
      - run: flake8 . --ignore=W605,E501

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: app
          POSTGRES_USER: app
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U app -d app"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r myproject/requirements.txt

      - name: Run migrations (Postgres)
        working-directory: myproject
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: "True"
          POSTGRES_DB: app
          POSTGRES_USER: app
          POSTGRES_PASSWORD: secret
          POSTGRES_HOST: "127.0.0.1"
          POSTGRES_PORT: "5432"
        run: python manage.py migrate --noinput

      # Тесты у тебя идут на SQLite (по условию 'test' в sys.argv) — это ок.
      - name: Run tests
        working-directory: myproject
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: "True"
        run: python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/drf_docker:${{ github.sha }} ./myproject
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/drf_docker:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    concurrency:
      group: prod-deploy
      cancel-in-progress: true
    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - uses: actions/checkout@v3

      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2
        with:
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: "False"
          # Лучше хранить именно эти секреты (см. ниже):
          envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_POSTGRES_HOST: "db"
          envkey_POSTGRES_PORT: "5432"
          envkey_REDIS_URL: "redis://redis:6379/1"

      - name: Copy files to server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/docker-compose.yaml
          scp -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/.env

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            cd ~
            export DOCKER_HUB_USERNAME='${{ secrets.DOCKER_HUB_USERNAME }}'
            export IMAGE_TAG='${{ github.sha }}'
            
            docker login -u "$DOCKER_HUB_USERNAME" -p '${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}' || true
            docker compose pull
            docker compose down --remove-orphans
            docker compose up -d
            docker compose ps
          EOF
